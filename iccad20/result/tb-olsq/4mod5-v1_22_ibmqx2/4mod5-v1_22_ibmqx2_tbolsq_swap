Input gate count = 21
depth = 12
gate count = OrderedDict([('cx', 11), ('t', 4), ('tdg', 3), ('h', 2), ('x', 1)])
Trying maximal layers = 1...
Trying maximal layers = 2...
Compilation time = 0.6745710372924805.
result additional SWAP count = 1.
gate 0 is at cycle 0 on node 1
gate 1 is at cycle 0 on edge (2,4)
gate 2 is at cycle 1 on edge (0,2)
gate 3 is at cycle 0 on node 1
gate 4 is at cycle 0 on node 2
gate 5 is at cycle 0 on node 0
gate 6 is at cycle 0 on node 1
gate 7 is at cycle 0 on edge (0,2)
gate 8 is at cycle 0 on edge (0,1)
gate 9 is at cycle 0 on edge (1,2)
gate 10 is at cycle 0 on node 0
gate 11 is at cycle 0 on edge (0,2)
gate 12 is at cycle 0 on node 2
gate 13 is at cycle 0 on node 0
gate 14 is at cycle 0 on node 1
gate 15 is at cycle 0 on edge (0,1)
gate 16 is at cycle 0 on edge (1,2)
gate 17 is at cycle 0 on edge (0,2)
gate 18 is at cycle 0 on node 1
gate 19 is at cycle 0 on edge (0,2)
gate 20 is at cycle 0 on edge (0,1)
logical qubit 0 is mapped to node 4 in the beginning, node 4 at the end
logical qubit 1 is mapped to node 3 in the beginning, node 2 at the end
logical qubit 2 is mapped to node 2 in the beginning, node 3 at the end
logical qubit 3 is mapped to node 0 in the beginning, node 0 at the end
logical qubit 4 is mapped to node 1 in the beginning, node 1 at the end
A swap gate finished at cycle 0 on edge (2, 3).
       ┌──────────┐                              ┌───┐┌───────────┐            »
q_0: ──┤ U1(pi/4) ├───────────────────────────■──┤ X ├┤ U1(-pi/4) ├────────────»
     ┌─┴──────────┴┐┌──────────┐┌──────────┐  │  └─┬─┘└───┬───┬───┘┌──────────┐»
q_1: ┤ U3(pi,0,pi) ├┤ U2(0,pi) ├┤ U1(pi/4) ├──┼────■──────┤ X ├────┤ U1(pi/4) ├»
     └────┬───┬────┘├──────────┤└──────────┘┌─┴─┐         └─┬─┘    └──────────┘»
q_2: ─────┤ X ├─────┤ U1(pi/4) ├────────────┤ X ├───────────■──────────────────»
          └─┬─┘     └──────────┘            └───┘                              »
q_3: ───────┼──────────────────────────────────────────────────────────────────»
            │           ┌─┐                                                    »
q_4: ───────■───────────┤M├────────────────────────────────────────────────────»
                        └╥┘                                                    »
c_0: ════════════════════╩═════════════════════════════════════════════════════»
                                                                               »
c_1: ══════════════════════════════════════════════════════════════════════════»
                                                                               »
c_2: ══════════════════════════════════════════════════════════════════════════»
                                                                               »
c_3: ══════════════════════════════════════════════════════════════════════════»
                                                                               »
c_4: ══════════════════════════════════════════════════════════════════════════»
                                                                               »
«     ┌───┐┌───────────┐┌───┐                      ┌───┐                  ┌───┐»
«q_0: ┤ X ├┤ U1(-pi/4) ├┤ X ├───────■──────────────┤ X ├──■───────────────┤ X ├»
«     └─┬─┘└───────────┘└─┬─┘┌───┐  │  ┌──────────┐└─┬─┘┌─┴─┐     ┌─┐     └─┬─┘»
«q_1: ──┼─────────────────■──┤ X ├──┼──┤ U2(0,pi) ├──┼──┤ X ├─────┤M├───────┼──»
«       │  ┌───────────┐     └─┬─┘┌─┴─┐└──────────┘  │  └───┘┌───┐└╥┘       │  »
«q_2: ──■──┤ U1(-pi/4) ├───────■──┤ X ├──────────────■────■──┤ X ├─╫───■────■──»
«          └───────────┘          └───┘                 ┌─┴─┐└─┬─┘ ║ ┌─┴─┐ ┌─┐ »
«q_3: ──────────────────────────────────────────────────┤ X ├──■───╫─┤ X ├─┤M├─»
«                                                       └───┘      ║ └───┘ └╥┘ »
«q_4: ─────────────────────────────────────────────────────────────╫────────╫──»
«                                                                  ║        ║  »
«c_0: ═════════════════════════════════════════════════════════════╬════════╬══»
«                                                                  ║        ║  »
«c_1: ═════════════════════════════════════════════════════════════╬════════╩══»
«                                                                  ║           »
«c_2: ═════════════════════════════════════════════════════════════╬═══════════»
«                                                                  ║           »
«c_3: ═════════════════════════════════════════════════════════════╬═══════════»
«                                                                  ║           »
«c_4: ═════════════════════════════════════════════════════════════╩═══════════»
«                                                                              »
«        ┌─┐
«q_0: ───┤M├
«        └╥┘
«q_1: ────╫─
«     ┌─┐ ║ 
«q_2: ┤M├─╫─
«     └╥┘ ║ 
«q_3: ─╫──╫─
«      ║  ║ 
«q_4: ─╫──╫─
«      ║  ║ 
«c_0: ═╬══╬═
«      ║  ║ 
«c_1: ═╬══╬═
«      ║  ║ 
«c_2: ═╩══╬═
«         ║ 
«c_3: ════╩═
«           
«c_4: ══════
«           
depth = 16
gate count = OrderedDict([('cx', 14), ('u1', 7), ('measure', 5), ('u2', 2), ('u3', 1)])
